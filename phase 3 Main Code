from flask import Flask, render_template, request
import os
import cv2
import numpy as np
import tensorflow as tf
from werkzeug.utils import secure_filename
from tensorflow.keras.models import load_model

app = Flask(__name__)
UPLOAD_FOLDER = 'uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

model = load_model('xception_model.h5')

def preprocess_frame(frame):
    frame = cv2.resize(frame, (128, 128))
    frame = frame / 255.0
    return frame

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    video = request.files['video']
    filename = secure_filename(video.filename)
    filepath = os.path.join(UPLOAD_FOLDER, filename)
    video.save(filepath)

    cap = cv2.VideoCapture(filepath)
    frames = []
    success, frame = cap.read()
    count = 0
    while success and count < 30:  # Limit to 30 frames for speed
        frames.append(preprocess_frame(frame))
        success, frame = cap.read()
        count += 1
    cap.release()

    frames = np.array(frames)
    if len(frames) == 0:
        return render_template('result.html', prediction='No frames detected.')

    predictions = model.predict(frames, verbose=0)
    avg_pred = np.mean(predictions)
    result = 'Fake' if avg_pred > 0.5 else 'Real'

    os.remove(filepath)
    return render_template('result.html', prediction=result)

if __name__ == '__main__':
    app.run(debug=True)
